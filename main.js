/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var ge=Object.create;var M=Object.defineProperty;var me=Object.getOwnPropertyDescriptor;var fe=Object.getOwnPropertyNames;var we=Object.getPrototypeOf,ye=Object.prototype.hasOwnProperty;var ve=(f,g)=>{for(var e in g)M(f,e,{get:g[e],enumerable:!0})},se=(f,g,e,n)=>{if(g&&typeof g=="object"||typeof g=="function")for(let t of fe(g))!ye.call(f,t)&&t!==e&&M(f,t,{get:()=>g[t],enumerable:!(n=me(g,t))||n.enumerable});return f};var A=(f,g,e)=>(e=f!=null?ge(we(f)):{},se(g||!f||!f.__esModule?M(e,"default",{value:f,enumerable:!0}):e,f)),xe=f=>se(M({},"__esModule",{value:!0}),f);var Ee={};ve(Ee,{default:()=>V});module.exports=xe(Ee);var c=require("obsidian"),D=require("child_process"),C=A(require("fs")),x=A(require("path")),ae=require("util"),re=A(require("os")),le=require("crypto"),ce=require("url"),Ce=(0,ae.promisify)(C.mkdtemp),U="r-environment-view",Q="r-help-view",be={rExecutablePath:"/usr/local/bin/R",rstudioPandocPath:"/opt/homebrew/bin/",quartoExecutablePath:"/usr/local/bin/quarto",enableFloatingMenu:!0},j=class{constructor(g){this.plugin=g}onLoad(){console.log("Loading Floating Menu Plugin"),this.addMenu(),this.plugin.registerEvent(this.plugin.app.workspace.on("active-leaf-change",()=>{console.log("Active leaf changed. Updating menu."),this.addMenu()})),this.plugin.registerEvent(this.plugin.app.workspace.on("layout-change",()=>{console.log("Layout changed. Updating menu."),this.addMenu()}))}onUnload(){console.log("Unloading Floating Menu Plugin"),this.menuContainer&&this.menuContainer.remove()}addMenu(){this.menuContainer&&this.menuContainer.remove();let g=this.plugin.app.workspace.getActiveViewOfType(c.MarkdownView);if(!g)return;let e=g.containerEl.querySelector(".cm-editor");if(!e){console.log("Editor container not found.");return}this.menuContainer=document.createElement("div"),this.menuContainer.className="floating-menu";let n=this.createIconButton("bold",()=>this.plugin.applyWrapping("**"),"Bold"),t=this.createIconButton("italic",()=>this.plugin.applyWrapping("_"),"Italic"),i=this.createIconButton("strikethrough",()=>this.plugin.applyWrapping("~~"),"Strikethrough"),s=this.createIconButton("underline",()=>this.plugin.applyHtmlTag("u"),"Underline"),o=this.createTextButton("align-left","",()=>this.plugin.applyAlignment("left"),"Left Align"),a=this.createTextButton("align-center","",()=>this.plugin.applyAlignment("center"),"Center Align"),r=this.createTextButton("align-right","",()=>this.plugin.applyAlignment("right"),"Right Align"),p=this.createTextButton("align-justify","",()=>this.plugin.applyAlignment("justify"),"Justify"),l=this.createIconButton("heading-1",()=>this.plugin.applyHeading(1),"Heading 1"),u=this.createIconButton("heading-2",()=>this.plugin.applyHeading(2),"Heading 2"),m=this.createIconButton("heading-3",()=>this.plugin.applyHeading(3),"Heading 3"),h=this.createTextButton("code","Insert R",()=>this.plugin.insertCodeBlock("r"),"R code chunk"),w=this.createTextButton("play","Run Chunk",()=>this.plugin.runCommand("ridian:run-current-code-chunk"),"Run Current Code Chunk"),y=this.createTextButton("file-down","Render/Quarto",()=>this.plugin.runCommand("ridian:export-note-with-quarto"),"Export Note with Quarto");if(w.classList.add("glow-on-hover"),y.classList.add("glow-on-hover"),h.classList.add("glow-on-hover"),this.menuContainer.appendChild(n),this.menuContainer.appendChild(t),this.menuContainer.appendChild(i),this.menuContainer.appendChild(s),this.menuContainer.appendChild(o),this.menuContainer.appendChild(a),this.menuContainer.appendChild(r),this.menuContainer.appendChild(p),this.menuContainer.appendChild(l),this.menuContainer.appendChild(u),this.menuContainer.appendChild(m),this.menuContainer.appendChild(h),this.menuContainer.appendChild(w),this.menuContainer.appendChild(y),e.parentElement)e.parentElement.insertBefore(this.menuContainer,e);else{console.log("Parent element of editorContainer is null.");return}e.style.marginTop=`${this.menuContainer.offsetHeight}px`}createIconButton(g,e,n){let t=document.createElement("button");return t.className="floating-menu-button",(0,c.setIcon)(t,g),n&&(t.setAttribute("aria-label",n),t.setAttribute("title",n)),t.addEventListener("click",e),t}createTextButton(g,e,n,t){let i=document.createElement("button");i.className="floating-menu-button floating-menu-button-text";let s=document.createElement("span");(0,c.setIcon)(s,g),s.className="button-icon";let o=document.createElement("span");return o.textContent=e,o.className="button-text",i.appendChild(s),i.appendChild(o),t&&(i.setAttribute("aria-label",t),i.setAttribute("title",t)),i.addEventListener("click",n),i}},z=class extends c.ItemView{constructor(e){super(e);this.environmentData=[];this.noteTitle=""}getViewType(){return U}getDisplayText(){return"R Environment"}getIcon(){return"table"}async onOpen(){console.log("REnvironmentView opened"),this.containerEl.empty(),this.render()}async onClose(){console.log("REnvironmentView closed")}updateEnvironmentData(e,n){console.log(`Updating environment data for note: ${e}`,n),this.noteTitle=e,this.environmentData=n,this.render()}render(){console.log("REnvironmentView render called with data:",this.environmentData),this.containerEl.empty();let e=document.createElement("div");e.style.padding="10px",e.style.overflowY="auto";let n=document.createElement("h5");n.textContent=`R environment for ${this.noteTitle}`,n.style.fontFamily='"Helvetica Neue", sans-serif',n.style.fontSize="18px",n.style.fontWeight="250",n.style.marginBottom="15px",n.style.padding="10px",n.style.borderRadius="8px",n.style.textAlign="center",n.classList.add("theme-aware-title"),e.appendChild(n);let t=document.createElement("table");t.style.width="100%",t.style.borderCollapse="separate",t.style.borderSpacing="0",t.style.fontFamily="'Monaco', 'monospace'",t.style.whiteSpace="nowrap",t.style.overflow="hidden",t.style.borderRadius="12px",t.style.tableLayout="fixed",t.style.border="1px solid rgba(200, 200, 200, 0.3)",t.classList.add("theme-aware-table");let i=document.createElement("tr");["Name","Type","Size","Value"].forEach((r,p)=>{let l=document.createElement("th");l.textContent=r,l.style.padding="12px",l.style.textAlign="left",l.style.fontFamily='"Helvetica Neue", sans-serif',l.style.fontSize="12px",l.style.fontWeight="250",l.style.borderBottom="2px solid rgba(200, 200, 200, 0.5)",l.style.borderRight="1px solid rgba(200, 200, 200, 0.3)",r==="Type"&&(l.style.width="90px"),r==="Size"&&(l.style.width="80px"),r==="Name"&&(l.style.width="60px"),i.appendChild(l)}),t.appendChild(i),this.environmentData.forEach(r=>{let p=document.createElement("tr");p.style.transition="background-color 0.3s",p.style.borderRadius="12px",p.classList.add("theme-aware-row"),p.addEventListener("mouseover",()=>{p.style.backgroundColor="var(--hover-background-color)"}),p.addEventListener("mouseout",()=>{p.style.backgroundColor="var(--row-background-color)"});let l=(b,$="left")=>{let v=document.createElement("td");return v.textContent=b,v.style.padding="12px",v.style.borderBottom="1px solid rgba(200, 200, 200, 0.5)",v.style.borderRight="1px solid rgba(200, 200, 200, 0.3)",v.style.textAlign=$,v.style.fontSize="12px",v.style.overflow="hidden",v.style.textOverflow="ellipsis",v.classList.add("theme-aware-cell"),$==="left"&&b===r.value&&(v.style.width="65%"),v},u=l(r.name);p.appendChild(u);let m=l(Array.isArray(r.type)?r.type.join(", "):r.type);p.appendChild(m);function h(b){let $=["B","KB","MB","GB","TB"];if(b==0)return"0 Byte";let v=Math.floor(Math.log(b)/Math.log(1024));return(b/Math.pow(1024,v)).toFixed(1)+" "+$[v]}let w=l(h(r.size),"right");p.appendChild(w);let y=Array.isArray(r.value)?r.value.slice(0,5).join(", ")+" ...":r.value.toString(),E=l(y);E.style.whiteSpace="nowrap",E.style.width="65%",p.appendChild(E),t.appendChild(p)}),e.appendChild(t),this.containerEl.appendChild(e);let a=document.createElement("style");a.textContent=`
      .theme-aware-title, .theme-aware-table, .theme-aware-cell, .theme-aware-row {
        color: var(--text-normal);
        background: var(--background-primary);
      }
      .theme-aware-row {
        background: var(--background-secondary);
      }
      .theme-aware-row:hover {
        background: var(--background-hover);
      }
      .theme-aware-table th {
        color: var(--text-muted);
      }
    `,document.head.appendChild(a)}},Y=class extends c.ItemView{constructor(e){super(e);this.helpContent=""}getViewType(){return Q}getDisplayText(){return"R Help"}getIcon(){return"info"}async onOpen(){console.log("RHelpView opened"),this.contentEl.empty(),this.render()}async onClose(){console.log("RHelpView closed")}updateHelpContent(e){console.log("Updating help content in RHelpView with content:",e),this.helpContent=e,this.render()}render(){console.log("RHelpView render called with help content:",this.helpContent),this.contentEl.empty();let e=document.createElement("div");e.style.padding="1px",e.style.overflowY="auto",e.style.fontFamily="sans-serif",e.innerHTML=this.helpContent;let n=document.createElement("style");n.innerHTML=`
        code {
            font-family: 'Monaco', 'Courier New', monospace;
            font-size: 0.95em;
            background-color: #f4f4f4;
            padding: 2px 4px;
            border-radius: 4px;
        }
    `,e.appendChild(n),this.contentEl.appendChild(e)}},q=class extends c.PluginSettingTab{constructor(e,n){super(e,n);this.plugin=n}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"R Integration Settings"});function n(t){return navigator.platform.includes("Win")?t.replace(/\\/g,"\\\\").replace(/\//g,"\\\\"):t}new c.Setting(e).setName("Path to R Executable").setDesc("Specify the full path to your R executable.").addText(t=>t.setPlaceholder("/usr/local/bin/R").setValue(n(this.plugin.settings.rExecutablePath)).onChange(async i=>{let s=n(i.trim());console.log("R Executable Path changed to: "+s),this.plugin.settings.rExecutablePath=s,await this.plugin.saveSettings(),new c.Notice("R executable path updated successfully.")})),new c.Setting(e).setName("Path to RStudio Pandoc").setDesc("Specify the full path to your RStudio Pandoc installation.").addText(t=>t.setPlaceholder("/opt/homebrew/bin/").setValue(n(this.plugin.settings.rstudioPandocPath)).onChange(async i=>{let s=n(i.trim());console.log("RStudio Pandoc Path changed to: "+s),this.plugin.settings.rstudioPandocPath=s,await this.plugin.saveSettings(),new c.Notice("RStudio Pandoc path updated successfully.")})),new c.Setting(e).setName("Quarto Executable Path").setDesc("Specify the full path to your Quarto executable. Example: /usr/local/bin/quarto").addText(t=>t.setPlaceholder("/usr/local/bin/quarto").setValue(this.plugin.settings.quartoExecutablePath).onChange(async i=>{console.log("Quarto Executable Path changed to: "+i),this.plugin.settings.quartoExecutablePath=i.trim(),await this.plugin.saveSettings(),new c.Notice("Quarto executable path updated successfully.")})),new c.Setting(e).setName("Enable Floating Menu").setDesc("Toggle to show or hide the floating menu in the editor.").addToggle(t=>t.setValue(this.plugin.settings.enableFloatingMenu).onChange(async i=>{console.log("Floating Menu Toggle:",i),this.plugin.settings.enableFloatingMenu=i,await this.plugin.saveSettings(),i?(this.plugin.floatingMenu.onLoad(),new c.Notice("Floating Menu Enabled.")):(this.plugin.floatingMenu.onUnload(),new c.Notice("Floating Menu Disabled."))}))}},V=class extends c.Plugin{constructor(){super(...arguments);this.rProcesses=new Map;this.VIEW_TYPE_R_ENVIRONMENT=U;this.VIEW_TYPE_R_HELP=Q}async onload(){console.log("Loading Combined Floating Menu and R Code Evaluator Plugin"),await this.loadSettings(),this.floatingMenu=new j(this),this.settings.enableFloatingMenu&&this.floatingMenu.onLoad(),this.addSettingTab(new q(this.app,this)),this.registerView(this.VIEW_TYPE_R_ENVIRONMENT,e=>new z(e)),this.registerView(this.VIEW_TYPE_R_HELP,e=>new Y(e)),this.app.workspace.onLayoutReady(()=>{if(console.log("Workspace is ready, adding R Environment and Help views"),this.app.workspace.getLeavesOfType(this.VIEW_TYPE_R_ENVIRONMENT).length===0){let e=this.app.workspace.getRightLeaf(!1);e?e.setViewState({type:this.VIEW_TYPE_R_ENVIRONMENT,active:!0}).then(()=>{console.log("REnvironmentView added to the right pane")}).catch(n=>{console.error("Failed to add REnvironmentView to the right pane:",n)}):console.error("Failed to obtain the right workspace leaf for REnvironmentView.")}else console.log("REnvironmentView already exists in the workspace");if(this.app.workspace.getLeavesOfType(this.VIEW_TYPE_R_HELP).length===0){let e=this.app.workspace.getRightLeaf(!0);e?e.setViewState({type:this.VIEW_TYPE_R_HELP,active:!0}).then(()=>{console.log("RHelpView added to the right pane")}).catch(n=>{console.error("Failed to add RHelpView to the right pane:",n)}):console.error("Failed to obtain the right workspace leaf for RHelpView.")}else console.log("RHelpView already exists in the workspace")}),this.registerRCommands(),console.log("Combined Plugin loaded successfully")}onunload(){console.log("Unloading Combined Floating Menu and R Code Evaluator Plugin"),this.floatingMenu.onUnload(),this.rProcesses.forEach((e,n)=>{console.log(`Terminating R process for note: ${n}`),e.kill()}),this.rProcesses.clear(),this.app.workspace.getLeavesOfType(this.VIEW_TYPE_R_ENVIRONMENT).forEach(e=>{console.log("Detaching REnvironmentView from workspace"),e.detach()}),this.app.workspace.getLeavesOfType(this.VIEW_TYPE_R_HELP).forEach(e=>{console.log("Detaching RHelpView from workspace"),e.detach()}),console.log("Combined Plugin unloaded successfully")}async loadSettings(){this.settings=Object.assign({},be,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}registerRCommands(){this.addCommand({id:"run-current-code-chunk",name:"Run Current Code Chunk",editorCallback:(e,n)=>{if(!n.file){new c.Notice("No file associated with the current view."),console.error("No file associated with the current view.");return}let t=n.file.basename;this.runCurrentCodeChunk(e,n,t)},hotkeys:[{modifiers:["Mod"],key:"r"}]}),this.addCommand({id:"export-note-with-quarto",name:"Export Note with Quarto",callback:()=>this.exportNoteWithQuarto()})}runCommand(e){console.log(`Executing command: ridian_v3:${e}`),this.app.commands.executeCommandById(e)}applyWrapping(e){let n=this.app.workspace.getActiveViewOfType(c.MarkdownView);if(!n)return;let t=n.editor,i=t.getSelection();if(i){t.replaceSelection(`${e}${i}${e}`);let s=t.getCursor(),o={line:s.line,ch:s.ch-i.length-e.length},a={line:s.line,ch:s.ch-e.length};t.setSelection(o,a),console.log(`Wrapped text from (${o.line}, ${o.ch}) to (${a.line}, ${a.ch})`)}else{let s=t.getCursor();t.replaceRange(`${e}${e}`,s);let o={line:s.line,ch:s.ch+e.length};t.setSelection(o,o),console.log(`Inserted wrappers at (${o.line}, ${o.ch})`)}t.focus()}applyHtmlTag(e){try{let n=this.app.workspace.getActiveViewOfType(c.MarkdownView);if(!n){console.error("No active Markdown view found."),new c.Notice("No active Markdown view found.");return}let t=n.editor,i=t.getSelection(),s=`<${e}>`,o=`</${e}>`;if(i){t.replaceSelection(`${s}${i}${o}`);let a=t.getCursor(),r=a.ch-o.length;t.setCursor({line:a.line,ch:r})}else{t.replaceRange(`${s}${o}`,t.getCursor());let a=t.getCursor();t.setCursor({line:a.line,ch:a.ch-o.length})}t.focus()}catch(n){console.error("Error in applyHtmlTag:",n),new c.Notice(`Failed to apply HTML tag: ${n.message}`)}}applyHeading(e){let n=this.app.workspace.getActiveViewOfType(c.MarkdownView);if(n){let t=n.editor,i=t.getCursor(),s=t.getLine(i.line),o="#".repeat(e)+" ";if(s.startsWith("#")){let r=s.replace(/^#+\s*/,"");t.replaceRange(o+r,{line:i.line,ch:0},{line:i.line,ch:s.length})}else t.replaceRange(o,{line:i.line,ch:0});let a=o.length;t.setCursor({line:i.line,ch:a}),console.log(`Cursor moved to (${i.line}, ${a}) after applying heading level ${e}.`),t.focus()}}insertCodeBlock(e){let n=this.app.workspace.getActiveViewOfType(c.MarkdownView);if(!n)return;let t=n.editor,i=t.getCursor(),s=`\`\`\`${e}
`,o="\n```\n";t.replaceRange(s,i),t.replaceRange(o,{line:i.line,ch:i.ch+s.length});let a={line:i.line+1,ch:0};t.setSelection(a,a),console.log(`Inserted ${e} code block at (${a.line}, ${a.ch}).`),t.focus()}applyAlignment(e){let n=this.app.workspace.getActiveViewOfType(c.MarkdownView);if(n){let t=n.editor,i=t.getSelection(),s=`<div style="text-align: ${e};">`,o="</div>";if(i){t.replaceSelection(`${s}
${i}
${o}`);let a=t.getCursor();t.setCursor({line:a.line+1,ch:0})}else{t.replaceRange(`${s}

${o}`,t.getCursor());let a=t.getCursor();t.setCursor({line:a.line-1,ch:s.length+1})}t.focus()}}generateUniqueId(e){return(0,le.createHash)("sha256").update(e.toString()).digest("hex").substring(0,8)}runCurrentCodeChunk(e,n,t){var u;let i=e.getCursor(),{startLine:s,endLine:o,code:a,existingLabel:r,options:p}=this.getCurrentCodeChunk(e,i.line),l=o;if(a){let m=r||this.generateUniqueId(s),h=(u=n.file)==null?void 0:u.path;if(h){if(!r){let y=this.insertLabel(e,s,m);l+=y}console.log(`Running current code chunk in note: ${h} with ID: ${m}`);let w=/\?\s*\w+/.test(a)||/help\s*\(\s*\w+\s*\)/.test(a);this.runRCodeInSession(h,a,t,m,w,p).then(({result:y,imagePaths:E,widgetPaths:b,helpContent:$})=>{if(console.log("R code executed successfully"),w)new c.Notice("Help content updated in the sidebar.");else{let v=p.include=="false",B=p.output=="false";(y||E.length>0||b.length>0)&&this.insertOutputWithCallout(e,l,y,E,b,m,p),B&&this.removeOutputCallout(e,m),v&&this.removeOutputCallout(e,m)}}).catch(y=>{console.error("Error executing R code:",y),p.error!=="false"&&p.include!=="false"&&p.output!=="false"?this.insertOutputWithCallout(e,l,`Error:
${y}`,[],[],m,p):this.removeOutputCallout(e,m)})}else new c.Notice("No file associated with the current view."),console.error("No file associated with the current view.")}else new c.Notice("No R code chunk found at the cursor position."),console.log("No R code chunk found at the cursor position.")}getCurrentCodeChunk(e,n){let t=e.lineCount(),i=n,s=n,o=null,a={};for(;i>=0&&!this.isCodeChunkStart(e.getLine(i));)i--;if(i<0)return{startLine:-1,endLine:-1,code:"",existingLabel:null,options:{}};for(s=i+1;s<t&&!e.getLine(s).startsWith("```");)s++;if(s>=t)return{startLine:-1,endLine:-1,code:"",existingLabel:null,options:{}};o=this.parseChunkLabel(e,i),a=this.parseChunkOptions(e,i);let r=[];for(let l=i+1;l<s;l++){let u=e.getLine(l);u.trim().startsWith("#|")||r.push(u)}let p=r.join(`
`);return console.log(`Found code chunk from line ${i} to ${s} with label: ${o}`),{startLine:i,endLine:s,code:p,existingLabel:o,options:a}}isCodeChunkStart(e){return e=e.trim(),/^```{?r/.test(e)}parseChunkOptions(e,n){let t={},i=n+1,s=e.lineCount();for(;i<s;){let o=e.getLine(i).trim();if(o.startsWith("#|")){let a=o.match(/^#\|\s*(\w+)\s*:\s*(.*)$/);if(a){let r=a[1],p=a[2];p=p.replace(/^["']|["']$/g,""),t[r]=p}i++}else if(o===""||o.startsWith("#"))i++;else break}return t}parseChunkLabel(e,n){let t=n+1,i=e.lineCount();for(;t<i;){let s=e.getLine(t).trim();if(s.startsWith("#|")){let o=s.match(/^#\|\s*(\w+)\s*:\s*(.*)$/);if(o){let a=o[1],r=o[2];if(r=r.replace(/^["']|["']$/g,""),a==="label")return r}t++}else if(s===""||s.startsWith("#"))t++;else break}return null}insertLabel(e,n,t){let i=e.getLine(n).trim(),s=n+1,o=e.lineCount();for(;s<o&&e.getLine(s).trim().startsWith("#|");)s++;return e.replaceRange(`#| label: ${t}
`,{line:s,ch:0}),console.log(`Inserted label "#| label: ${t}" into code chunk at line ${s}`),1}insertOutputWithCallout(e,n,t,i,s,o,a){console.log("Inserting or updating output callout and images into the editor");let r=[];if(t&&t.trim()!==""){let h=t.trim().split(`
`).map(w=>"> "+w);r.push(...h)}if(i.forEach(h=>{let y=`![center|480](${`${h}`})`;r.push(`> ${y}`)}),s.forEach(h=>{let w=`<iframe src="${h}" width="100%" height="680px"></iframe>`;r.push(`> ${w}`)}),r.length===0){console.log("No output, images, or widgets to insert. Skipping callout insertion.");return}let p=`> [!OUTPUT]+ {#output-${o}}
`;p+=r.join(`
`)+`
`,p+=`> 
`;let l=-1,u=-1,m=e.lineCount();for(let h=0;h<m;h++)if(e.getLine(h).trim()===`> [!OUTPUT]+ {#output-${o}}`){for(l=h,u=h;u+1<m;){let y=e.getLine(u+1);if(!y.startsWith("> ")&&y.trim()!=="")break;u++}break}if(l!==-1&&u!==-1){let h={line:l,ch:0},w={line:u+1,ch:0};e.replaceRange(p+`
`,h,w),console.log(`Replaced existing output callout for ID: ${o}`)}else{let h={line:n+1,ch:0};e.replaceRange(`
`+p+`
`,h),console.log(`Inserted new output callout for ID: ${o}`)}}removeOutputCallout(e,n){console.log(`Removing output callout for ID: ${n} if it exists`);let t=-1,i=-1,s=e.lineCount();for(let o=0;o<s;o++)if(e.getLine(o).trim()===`> [!OUTPUT]+ {#output-${n}}`){for(t=o,i=o;i+1<s;){let r=e.getLine(i+1);if(!r.startsWith("> ")&&r.trim()!=="")break;i++}break}if(t!==-1&&i!==-1){let o={line:t,ch:0},a={line:i+1,ch:0};e.replaceRange("",o,a),console.log(`Removed existing output callout for ID: ${n}`)}else console.log(`No existing output callout found for ID: ${n}`)}getRProcess(e){let n=this.rProcesses.get(e);return n||(n=this.startRProcess(e)),n}startRProcess(e){let n=this.settings.rExecutablePath||"/usr/local/bin/R";if(console.log(`Starting R process for note: ${e} using executable: ${n}`),!C.existsSync(n))throw new c.Notice(`R executable not found at ${n}. Please update the path in settings.`),console.error(`R executable not found at ${n}.`),new Error(`R executable not found at ${n}.`);let t={...process.env},i=(0,D.spawn)(n,["--vanilla","--quiet","--slave"],{stdio:"pipe",env:t});i.on("error",o=>{console.error(`Failed to start R process for ${e}:`,o)});let s=`
library(jsonlite)
if (!exists("user_env")) {
  user_env <- new.env()
}


# prevent browser:
options(browser='false')
options(bitmapType = 'cairo')
options(device = function(...) jpeg(filename = tempfile(), width=800, height=600, ...))
    `;return i.stdin.write(s+`
`),this.rProcesses.set(e,i),console.log(`R process started and stored for note: ${e}`),i}async runRCodeInSession(e,n,t,i,s,o){console.log("runRCodeInSession called for note:",e,"with ID:",i);let a=this.getRProcess(e);return new Promise(async(r,p)=>{let l="",u="",m=await Ce(x.join(re.tmpdir(),"rplots-")),h=process.platform==="win32"?m.replace(/\\/g,"\\\\"):m.replace(/\\/g,"/"),w=x.join(h,`help_${i}.txt`),y=process.platform==="win32"?w.replace(/\\/g,"\\\\"):w.replace(/\\/g,"/"),E=`__END_OF_OUTPUT__${Date.now()}__`,b="__PLOT_PATH__",$=`__ENVIRONMENT_DATA__${Date.now()}__`,v="__WIDGET_PATH__",B=`
      opts <- list(
        echo = ${o.echo!=="false"?"TRUE":"FALSE"},
        warning = ${o.warning!=="false"?"TRUE":"FALSE"},
        error = ${o.error!=="false"?"TRUE":"FALSE"},
        include = ${o.include!=="false"?"TRUE":"FALSE"},
        output = ${o.output!=="false"?"TRUE":"FALSE"}
      )
      `,J=`
library(evaluate)
library(jsonlite)
library(htmlwidgets)
Sys.setenv(RSTUDIO_PANDOC='${this.settings.rstudioPandocPath}')


${B}

# Define our custom print function
custom_print_htmlwidget <- function(x, ..., viewer = NULL) {
    # Generate a unique filename
    
    widgetFileName <- paste0("widget_${i}_",".html")
    widgetFilePath <- file.path("${h}", widgetFileName)
    # Save the widget to the file
    saveWidget(x, widgetFilePath, selfcontained = TRUE)
    # Output a marker to indicate the widget was saved
    cat("${v}", widgetFileName, "\\n", sep="")
}

# Replace the original function in the 'htmlwidgets' namespace
environment(custom_print_htmlwidget) <- asNamespace('htmlwidgets')
assignInNamespace("print.htmlwidget", custom_print_htmlwidget, envir = as.environment("package:htmlwidgets"))



timecheck <- Sys.time()

# override help
.getHelpFile <- function(file)
{
    path <- dirname(file)
    dirpath <- dirname(path)
    if(!file.exists(dirpath))
        stop(gettextf("invalid %s argument", sQuote("file")), domain = NA)
    pkgname <- basename(dirpath)
    RdDB <- file.path(path, pkgname)
    if(!file.exists(paste(RdDB, "rdx", sep = ".")))
        stop(gettextf("package %s exists but was not installed under R >= 2.10.0 so help cannot be accessed", sQuote(pkgname)), domain = NA)
    tools:::fetchRdDB(RdDB, basename(file))
}


print.help_files_with_topic <- function(x, ...)
{
  browser <- getOption("browser")
  topic <- attr(x, "topic")
  type <- "text"
  paths <- as.character(x)
  
  if(!length(paths)) {
    writeLines(c(gettextf("No documentation for %s in specified packages and libraries:",
                          sQuote(topic)),
                 gettextf("you could try %s",
                          sQuote(paste0("??", topic)))))
    return(invisible(x))
  }
  
  port <- NULL
  
  if(attr(x, "tried_all_packages")) {
    paths <- unique(dirname(dirname(paths)))
    msg <- gettextf("Help for topic %s is not in any loaded package but can be found in the following packages:",
                    sQuote(topic))
    
      writeLines(c(strwrap(msg), "",
                   paste(" ",
                         formatDL(c(gettext("Package"), basename(paths)),
                                  c(gettext("Library"), dirname(paths)),
                                  indent = 22))))
    } else {
    if(length(paths) > 1L) {
      file <- paths[1L]
      p <- paths
      msg <- gettextf("Help on topic %s was found in the following packages:",
                      sQuote(topic))
      paths <- dirname(dirname(paths))
      txt <- formatDL(c("Package", basename(paths)),
                      c("Library", dirname(paths)),
                      indent = 22L)
      writeLines(c(strwrap(msg), "", paste(" ", txt), ""))
      if(interactive()) {
        fp <- file.path(paths, "Meta", "Rd.rds")
        tp <- basename(p)
        titles <- tp
        if(type == "html" || type == "latex")
          tp <- tools::file_path_sans_ext(tp)
        for (i in seq_along(fp)) {
          tmp <- try(readRDS(fp[i]))
          titles[i] <- if(inherits(tmp, "try-error"))
            "unknown title" else
              tmp[tools::file_path_sans_ext(tmp$File) == tp[i], "Title"]
        }
        txt <- paste0(titles, " {", basename(paths), "}")
        ## the default on menu() is currtently graphics = FALSE
        res <- menu(txt, title = gettext("Choose one"),
                    graphics = getOption("menu.graphics"))
        if(res > 0) file <- p[res]
      } else {
        writeLines(gettext("
Using the first match ..."))
      }
    }
    else
      file <- paths
    
    if(type == "text") {
      pkgname <- basename(dirname(dirname(file)))
      tools::Rd2HTML(.getHelpFile(file), out = "${y}",
                            package = pkgname)

    }
    
  }
  
  invisible(x)
}

# Ensure user environment exists
if (!exists("user_env")) {
  user_env <- new.env()
}
# Evaluate code and capture results
results <- evaluate(${JSON.stringify(n)}, envir = user_env)

# Initialize outputs and image paths
outputs <- character()
imagePaths <- character()

# Process the results
for (res in results) {
  if (inherits(res, "source")) {
    # Ignore source elements
  } else if (inherits(res, "warning")) {
    if (opts$warning && opts$include) {
      outputs <- c(outputs, paste("Warning:", conditionMessage(res)))
    }
  } else if (inherits(res, "message")) {
    if (opts$output && opts$include) {
      outputs <- c(outputs, res$message)
    }
  } else if (inherits(res, "error")) {
    if (opts$error && opts$include) {
      outputs <- c(outputs, paste("Error:", conditionMessage(res)))
    }
  } else if (inherits(res, "character")) {
    if (opts$output && opts$include) {
      outputs <- c(outputs, res)
    }
  } else if (inherits(res, "recordedplot")) {
    if (opts$output && opts$include) {
      # Save the plot to a file using uniqueId
      timestamp <- format(Sys.time(), "%Y%m%d%H%M%S")
      plotFileName <- paste0("plot_${i}_", length(imagePaths) + 1, "_", timestamp, ".jpg")
      plotFilePath <- file.path("${h}", plotFileName)
      jpeg(filename=plotFilePath, width=800, height=600)
      replayPlot(res)
      dev.off()
      imagePaths <- c(imagePaths, plotFileName)
    }
  }
}

# Attempt to retrieve the last animation, if any
if (opts$output && opts$include) {
  if (requireNamespace("gganimate", quietly = TRUE)) {
    anim <- try(gganimate::last_animation(), silent = TRUE)
    if (is.character(anim[1])) {
      if (file.info(anim[1])$mtime > timecheck) {
        timestamp <- format(Sys.time(), "%Y%m%d%H%M%S")
        animFileName <- paste0("animation_${i}_", timestamp, ".gif")
        animFilePath <- file.path("${h}", animFileName)
        file.copy(anim[1], animFilePath)
        imagePaths <- c(imagePaths, animFileName)
      }
    }
  }
}

# Output the collected outputs
if (opts$output && opts$include && length(outputs) > 0) {
  cat(paste(outputs, collapse = "\\n"), "\\n")
}

# Output image markers
if (opts$output && opts$include) {
  for (img in imagePaths) {
    cat("${b}", img, "\\n", sep="")
  }
}

# Output the environment data
vars <- ls(envir = user_env)
env_list <- lapply(vars, function(var_name) {
  var_value <- get(var_name, envir = user_env)
  var_class <- class(var_value)
  var_size <- as.numeric(object.size(var_value)) # Convert to numeric
  var_val <- capture.output(str(var_value, max.level=0))

  list(
    name = var_name,
    type = var_class,
    size = var_size,
    value = var_val
  )
})




env_json <- toJSON(env_list, auto_unbox = TRUE)
cat("${$}\\n")
cat(env_json)
cat("\\n${E}\\n")
      `;console.log(`Wrapped code sent to R:
`,J);let G=async O=>{var Z,X;let L=O.toString();if(console.log("Received data chunk:",L),l+=L,l.includes(E)){console.log("Marker detected in R output"),a.stdout.off("data",G),a.stderr.off("data",K);let P="",S="";if(s){try{let R=await C.promises.readFile(w,"utf8");console.log("Read help content:",R),S=R}catch(R){console.error("Failed to read help content:",R),S="Failed to retrieve help content."}let d=(Z=this.app.workspace.getLeavesOfType(Q)[0])==null?void 0:Z.view;d?d.updateHelpContent(S):console.log("RHelpView not found in the workspace")}let I="";if(l.includes($)){let d=l.split($);P=d[0].trim(),I=d[1].split(E)[0].trim()}else P=l.split(E)[0].trim();console.log("Result before processing:",P),console.log("Environment data:",I);let ee=b.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),T=[],pe=new RegExp(`${ee}(.*)`,"g"),F;for(;(F=pe.exec(P))!==null;)if(console.log("Image regex match:",F),F[1]){let d=F[1].trim();T.push(d)}else console.error("No image file name captured in regex match:",F);P=P.replace(new RegExp(`${ee}.*`,"g"),"").trim();for(let d of T){let R=x.join(m,d);try{let k=await C.promises.readFile(R),_=`plots/${d}`;this.app.vault.getAbstractFileByPath("plots")||(await this.app.vault.createFolder("plots"),console.log('Created "plots" folder in the vault'));let H=this.app.vault.getAbstractFileByPath(_);H?(await this.app.vault.modifyBinary(H,k),console.log(`Image file updated in vault: ${_}`)):(await this.app.vault.createBinary(_,k),console.log(`Image file created in vault: ${_}`)),T[T.indexOf(d)]=_}catch(k){console.error(`Error handling image file ${d}:`,k)}}let N=[],te=v.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),ue=new RegExp(`${te}(.*)`,"g"),W;for(;(W=ue.exec(P))!==null;)if(W[1]){let d=W[1].trim();N.push(d)}P=P.replace(new RegExp(`${te}.*`,"g"),"").trim();for(let d of N){let R=x.join(m,d);try{let k=await C.promises.readFile(R,"utf8"),_=`widgets/${d}`,ie=this.app.vault.adapter.getBasePath();this.app.vault.getAbstractFileByPath("widgets")||await this.app.vault.createFolder("widgets");let oe=this.app.vault.getAbstractFileByPath(_);oe?await this.app.vault.modify(oe,k):await this.app.vault.create(_,k);let he=x.join(ie,_),de=(0,ce.pathToFileURL)(he).href;N[N.indexOf(d)]=de}catch(k){console.error(`Error handling widget file ${d}:`,k)}}try{console.log(`Temporary directory ${m} removed`)}catch(d){console.error(`Error removing temporary directory ${m}:`,d)}let ne=(X=this.app.workspace.getLeavesOfType(U)[0])==null?void 0:X.view;if(ne){let d=[];try{d=JSON.parse(I),console.log("Parsed environment variables:",d)}catch(R){console.error("Failed to parse environment data JSON:",R)}ne.updateEnvironmentData(t,d)}else console.log("REnvironmentView not found in the workspace");l="",u="",u?p(u.trim()):r({result:P,imagePaths:T,widgetPaths:N,helpContent:S})}},K=O=>{let L=O.toString();console.error("Received error chunk from R:",L),u+=L};a.stdout.on("data",G),a.stderr.on("data",K),a.stdin.write(J+`
`),console.log("Wrapped R code sent to the R process")})}replaceCodeFenceMarkers(e){let n=/^```r$/gmi;return e.replace(n,"```{r}")}addFrontMatter(e,n){return e.startsWith(`---
`)?e:`---
title: "${n.basename}"
author: "Author Name"
date: today
format: html
---

`+e}sanitizeFileName(e){return e.replace(/[^a-zA-Z0-9-_]/g,"_")}stripOutputCallouts(e){let n=/> \[!OUTPUT\]\+ {#output-[\w]+}\n(?:>.*\n)*>/gm;return e.replace(n,"")}async savePreparedNote(e,n){let t=x.basename(n,".md"),i=this.sanitizeFileName(t),s=`${i}_quarto.qmd`,o,a=this.app.vault.adapter;if(a instanceof c.FileSystemAdapter)o=a.getBasePath();else throw new c.Notice("Unable to determine vault base path. Export failed."),new Error("Vault adapter is not a FileSystemAdapter.");let r=x.join(o,"exports"),p=x.join(r,i);if(!C.existsSync(r))try{C.mkdirSync(r),console.log(`Created exports folder at ${r}`)}catch(u){throw new c.Notice("Failed to create exports folder. Export failed."),console.error("Error creating exports folder:",u),u}if(!C.existsSync(p))try{C.mkdirSync(p),console.log(`Created base export folder at ${p}`)}catch(u){throw new c.Notice("Failed to create base export folder. Export failed."),console.error("Error creating base export folder:",u),u}let l=x.join(p,s);try{await C.promises.writeFile(l,e,"utf8"),new c.Notice(`Exported to ${l}`),console.log(`Successfully exported to ${l}`)}catch(u){throw new c.Notice("Failed to write export file. Export failed."),console.error("Error writing export file:",u),u}return l}async renderWithQuarto(e){return new Promise((n,t)=>{let i=this.settings.quartoExecutablePath||"quarto";if(!C.existsSync(i)){new c.Notice(`Quarto executable not found at ${i}. Please update the path in settings.`),console.error(`Quarto executable not found at ${i}.`),t(new Error(`Quarto executable not found at ${i}.`));return}let s=this.settings.rExecutablePath||"Rscript",o={...process.env};o.QUARTO_R=s;let a=x.dirname(s);o.PATH=`${a}${x.delimiter}${o.PATH}`;let r=(0,D.spawn)(i,["render",e],{stdio:["ignore","pipe","pipe"],env:o}),p="";r.stderr.on("data",l=>{p+=l.toString()}),r.on("error",l=>{new c.Notice("Failed to start Quarto rendering process."),console.error(`Failed to start Quarto rendering process: ${l}`),t(l)}),r.on("exit",(l,u)=>{console.log(`Quarto render process exited with code: ${l}, signal: ${u}`),l===0?(new c.Notice("Quarto rendering completed successfully."),n()):(console.error(`Quarto stderr: ${p}`),new c.Notice("Quarto rendering failed. Click for details.",1e4),t(new Error(`Quarto exited with code ${l}`)))})})}async exportNoteWithQuarto(){let e=this.app.workspace.getActiveFile();if(!e){new c.Notice("No active note to export.");return}try{let t=await this.app.vault.read(e);t=this.addFrontMatter(t,e),t=this.stripOutputCallouts(t),t=this.replaceCodeFenceMarkers(t);let i=await this.savePreparedNote(t,e.path);await this.renderWithQuarto(i),new c.Notice("Note exported and rendered with Quarto successfully.")}catch(n){console.error("Failed to export note with Quarto:",n),new c.Notice("Failed to export note with Quarto.")}}};
