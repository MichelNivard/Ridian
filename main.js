/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var he=Object.create;var W=Object.defineProperty;var ge=Object.getOwnPropertyDescriptor;var me=Object.getOwnPropertyNames;var fe=Object.getPrototypeOf,we=Object.prototype.hasOwnProperty;var ve=(f,y)=>{for(var e in y)W(f,e,{get:y[e],enumerable:!0})},oe=(f,y,e,t)=>{if(y&&typeof y=="object"||typeof y=="function")for(let n of me(y))!we.call(f,n)&&n!==e&&W(f,n,{get:()=>y[n],enumerable:!(t=ge(y,n))||t.enumerable});return f};var I=(f,y,e)=>(e=f!=null?he(fe(f)):{},oe(y||!f||!f.__esModule?W(e,"default",{value:f,enumerable:!0}):e,f)),ye=f=>oe(W({},"__esModule",{value:!0}),f);var Ee={};ve(Ee,{default:()=>V});module.exports=ye(Ee);var p=require("obsidian"),B=require("child_process"),b=I(require("fs")),x=I(require("path")),ie=require("util"),ae=I(require("os")),re=require("crypto"),le=require("url"),xe=(0,ie.promisify)(b.mkdtemp),_="r-environment-view",O="r-help-view",be={rExecutablePath:"/usr/local/bin/R",rstudioPandocPath:"/opt/homebrew/bin/",quartoExecutablePath:"/usr/local/bin/quarto"},z=class extends p.ItemView{constructor(e){super(e);this.environmentData=[];this.noteTitle=""}getViewType(){return _}getDisplayText(){return"R Environment"}getIcon(){return"table"}async onOpen(){console.log("REnvironmentView opened"),this.containerEl.empty(),this.render()}async onClose(){console.log("REnvironmentView closed")}updateEnvironmentData(e,t){console.log(`Updating environment data for note: ${e}`,t),this.noteTitle=e,this.environmentData=t,this.render()}render(){console.log("REnvironmentView render called with data:",this.environmentData),this.containerEl.empty();let e=document.createElement("div");e.style.padding="10px",e.style.overflowY="auto";let t=document.createElement("h5");t.textContent=`R environment for ${this.noteTitle}`,t.style.fontFamily='"Poppins", sans-serif',t.style.fontSize="18px",t.style.fontWeight="600",t.style.marginBottom="15px",t.style.padding="10px",t.style.borderRadius="8px",t.style.textAlign="center",t.classList.add("theme-aware-title"),e.appendChild(t);let n=document.createElement("table");n.style.width="100%",n.style.borderCollapse="separate",n.style.borderSpacing="0",n.style.fontFamily="'Monaco', 'monospace'",n.style.whiteSpace="nowrap",n.style.overflow="hidden",n.style.borderRadius="12px",n.style.tableLayout="fixed",n.style.border="1px solid rgba(200, 200, 200, 0.3)",n.classList.add("theme-aware-table");let s=document.createElement("tr");["Name","Type","Size","Value"].forEach((a,r)=>{let i=document.createElement("th");i.textContent=a,i.style.padding="12px",i.style.textAlign="left",i.style.fontFamily='"Poppins", sans-serif',i.style.fontSize="12px",i.style.fontWeight="600",i.style.borderBottom="2px solid rgba(200, 200, 200, 0.5)",i.style.borderRight="1px solid rgba(200, 200, 200, 0.3)",a==="Type"&&(i.style.width="90px"),a==="Size"&&(i.style.width="80px"),a==="Name"&&(i.style.width="60px"),s.appendChild(i)}),n.appendChild(s),this.environmentData.forEach(a=>{let r=document.createElement("tr");r.style.transition="background-color 0.3s",r.style.borderRadius="12px",r.classList.add("theme-aware-row"),r.addEventListener("mouseover",()=>{r.style.backgroundColor="var(--hover-background-color)"}),r.addEventListener("mouseout",()=>{r.style.backgroundColor="var(--row-background-color)"});let i=(E,$="left")=>{let m=document.createElement("td");return m.textContent=E,m.style.padding="12px",m.style.borderBottom="1px solid rgba(200, 200, 200, 0.5)",m.style.borderRight="1px solid rgba(200, 200, 200, 0.3)",m.style.textAlign=$,m.style.fontSize="12px",m.style.overflow="hidden",m.style.textOverflow="ellipsis",m.classList.add("theme-aware-cell"),$==="left"&&E===a.value&&(m.style.width="65%"),m},h=i(a.name);r.appendChild(h);let g=i(Array.isArray(a.type)?a.type.join(", "):a.type);r.appendChild(g);function u(E){let $=["B","KB","MB","GB","TB"];if(E==0)return"0 Byte";let m=Math.floor(Math.log(E)/Math.log(1024));return(E/Math.pow(1024,m)).toFixed(1)+" "+$[m]}let w=i(u(a.size),"right");r.appendChild(w);let v=Array.isArray(a.value)?a.value.slice(0,5).join(", ")+" ...":a.value.toString(),P=i(v);P.style.whiteSpace="nowrap",P.style.width="65%",r.appendChild(P),n.appendChild(r)}),e.appendChild(n),this.containerEl.appendChild(e);let c=document.createElement("style");c.textContent=`
      .theme-aware-title, .theme-aware-table, .theme-aware-cell, .theme-aware-row {
        color: var(--text-normal);
        background: var(--background-primary);
      }
      .theme-aware-row {
        background: var(--background-secondary);
      }
      .theme-aware-row:hover {
        background: var(--background-hover);
      }
      .theme-aware-table th {
        color: var(--text-muted);
      }
    `,document.head.appendChild(c)}},j=class extends p.ItemView{constructor(e){super(e);this.helpContent=""}getViewType(){return O}getDisplayText(){return"R Help"}getIcon(){return"info"}async onOpen(){console.log("RHelpView opened"),this.contentEl.empty(),this.render()}async onClose(){console.log("RHelpView closed")}updateHelpContent(e){console.log("Updating help content in RHelpView with content:",e),this.helpContent=e,this.render()}render(){console.log("RHelpView render called with help content:",this.helpContent),this.contentEl.empty();let e=document.createElement("div");e.style.padding="1px",e.style.overflowY="auto",e.style.fontFamily="sans-serif",e.innerHTML=this.helpContent;let t=document.createElement("style");t.innerHTML=`
        code {
            font-family: 'Monaco', 'Courier New', monospace;
            font-size: 0.95em;
            background-color: #f4f4f4;
            padding: 2px 4px;
            border-radius: 4px;
        }
    `,e.appendChild(t),this.contentEl.appendChild(e)}},q=class extends p.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"R Integration Settings"});function t(n){return navigator.platform.includes("Win")?n.replace(/\\/g,"\\\\").replace(/\//g,"\\\\"):n}new p.Setting(e).setName("Path to R Executable").setDesc("Specify the full path to your R executable.").addText(n=>n.setPlaceholder("/usr/local/bin/R").setValue(t(this.plugin.settings.rExecutablePath)).onChange(async s=>{let l=t(s.trim());console.log("R Executable Path changed to: "+l),this.plugin.settings.rExecutablePath=l,await this.plugin.saveSettings(),new p.Notice("R executable path updated successfully.")})),new p.Setting(e).setName("Path to RStudio Pandoc").setDesc("Specify the full path to your RStudio Pandoc installation.").addText(n=>n.setPlaceholder("/opt/homebrew/bin/").setValue(t(this.plugin.settings.rstudioPandocPath)).onChange(async s=>{let l=t(s.trim());console.log("RStudio Pandoc Path changed to: "+l),this.plugin.settings.rstudioPandocPath=l,await this.plugin.saveSettings(),new p.Notice("RStudio Pandoc path updated successfully.")})),new p.Setting(e).setName("Quarto Executable Path").setDesc("Specify the full path to your Quarto executable. Example: /usr/local/bin/quarto").addText(n=>n.setPlaceholder("/usr/local/bin/quarto").setValue(this.plugin.settings.quartoExecutablePath).onChange(async s=>{console.log("Quarto Executable Path changed to: "+s),this.plugin.settings.quartoExecutablePath=s.trim(),await this.plugin.saveSettings(),new p.Notice("Quarto executable path updated successfully.")}))}},V=class extends p.Plugin{constructor(){super(...arguments);this.rProcesses=new Map}generateUniqueId(e){return(0,re.createHash)("sha256").update(e.toString()).digest("hex").substring(0,8)}async loadSettings(){this.settings=Object.assign({},be,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async onload(){console.log("Loading R Code Evaluator Plugin"),await this.loadSettings(),this.addSettingTab(new q(this.app,this)),this.registerView(_,e=>new z(e)),this.registerView(O,e=>new j(e)),this.app.workspace.onLayoutReady(()=>{if(console.log("Workspace is ready, adding R Environment and Help views"),this.app.workspace.getLeavesOfType(_).length===0){let e=this.app.workspace.getRightLeaf(!1);e?e.setViewState({type:_,active:!0}).then(()=>{console.log("REnvironmentView added to the right pane")}).catch(t=>{console.error("Failed to add REnvironmentView to the right pane:",t)}):console.error("Failed to obtain the right workspace leaf for REnvironmentView.")}else console.log("REnvironmentView already exists in the workspace");if(this.app.workspace.getLeavesOfType(O).length===0){let e=this.app.workspace.getRightLeaf(!0);e?e.setViewState({type:O,active:!0}).then(()=>{console.log("RHelpView added to the right pane")}).catch(t=>{console.error("Failed to add RHelpView to the right pane:",t)}):console.error("Failed to obtain the right workspace leaf for RHelpView.")}else console.log("RHelpView already exists in the workspace")}),this.addCommand({id:"run-current-code-chunk",name:"Run Current Code Chunk",editorCallback:(e,t)=>{if(!t.file){new p.Notice("No file associated with the current view."),console.error("No file associated with the current view.");return}let n=t.file.basename;this.runCurrentCodeChunk(e,t,n)},hotkeys:[{modifiers:["Mod"],key:"r"}]}),this.addCommand({id:"export-note-with-quarto",name:"Export Note with Quarto",callback:()=>this.exportNoteWithQuarto()}),console.log("R Code Evaluator Plugin loaded successfully")}onunload(){console.log("Unloading R Code Evaluator Plugin"),this.rProcesses.forEach((e,t)=>{console.log(`Terminating R process for note: ${t}`),e.kill()}),this.rProcesses.clear(),this.app.workspace.getLeavesOfType(_).forEach(e=>{console.log("Detaching REnvironmentView from workspace"),e.detach()}),console.log("R Code Evaluator Plugin unloaded successfully")}runCurrentCodeChunk(e,t,n){var h;let s=e.getCursor(),{startLine:l,endLine:o,code:c,existingLabel:a,options:r}=this.getCurrentCodeChunk(e,s.line),i=o;if(c){let g=a||this.generateUniqueId(l),u=(h=t.file)==null?void 0:h.path;if(u){if(!a){let v=this.insertLabel(e,l,g);i+=v}console.log(`Running current code chunk in note: ${u} with ID: ${g}`);let w=/\?\s*\w+/.test(c)||/help\s*\(\s*\w+\s*\)/.test(c);this.runRCodeInSession(u,c,n,g,w,r).then(({result:v,imagePaths:P,widgetPaths:E,helpContent:$})=>{if(console.log("R code executed successfully"),w)new p.Notice("Help content updated in the sidebar.");else{let m=r.include=="false",M=r.output=="false";(v||P.length>0||E.length>0)&&this.insertOutputWithCallout(e,i,v,P,E,g,r),M&&this.removeOutputCallout(e,g),m&&this.removeOutputCallout(e,g)}}).catch(v=>{console.error("Error executing R code:",v),r.error!=="false"&&r.include!=="false"&&r.output!=="false"?this.insertOutputWithCallout(e,i,`Error:
${v}`,[],[],g,r):this.removeOutputCallout(e,g)})}else new p.Notice("No file associated with the current view."),console.error("No file associated with the current view.")}else new p.Notice("No R code chunk found at the cursor position."),console.log("No R code chunk found at the cursor position.")}getCurrentCodeChunk(e,t){let n=e.lineCount(),s=t,l=t,o=null,c={};for(;s>=0&&!this.isCodeChunkStart(e.getLine(s));)s--;if(s<0)return{startLine:-1,endLine:-1,code:"",existingLabel:null,options:{}};for(l=s+1;l<n&&!e.getLine(l).startsWith("```");)l++;if(l>=n)return{startLine:-1,endLine:-1,code:"",existingLabel:null,options:{}};o=this.parseChunkLabel(e,s),c=this.parseChunkOptions(e,s);let a=[];for(let i=s+1;i<l;i++){let h=e.getLine(i);h.trim().startsWith("#|")||a.push(h)}let r=a.join(`
`);return console.log(`Found code chunk from line ${s} to ${l} with label: ${o}`),{startLine:s,endLine:l,code:r,existingLabel:o,options:c}}isCodeChunkStart(e){return e=e.trim(),/^```{?r/.test(e)}parseChunkOptions(e,t){let n={},s=t+1,l=e.lineCount();for(;s<l;){let o=e.getLine(s).trim();if(o.startsWith("#|")){let c=o.match(/^#\|\s*(\w+)\s*:\s*(.*)$/);if(c){let a=c[1],r=c[2];r=r.replace(/^["']|["']$/g,""),n[a]=r}s++}else if(o===""||o.startsWith("#"))s++;else break}return n}parseChunkLabel(e,t){let n=e.getLine(t).trim();if(n.startsWith("```{r")){let l=t+1,o=e.lineCount();for(;l<o;){let c=e.getLine(l).trim();if(c.startsWith("#|")){let a=c.match(/^#\|\s*(\w+)\s*:\s*(.*)$/);if(a){let r=a[1],i=a[2];if(i=i.replace(/^["']|["']$/g,""),r==="label")return i}l++}else if(c===""||c.startsWith("#"))l++;else break}}let s=n.match(/\{.*(#[^\s\}]+).*\}/);return s?s[1].substring(1):null}insertLabel(e,t,n){let s=e.getLine(t).trim();if(s.startsWith("```{r")){let o=t+1,c=e.lineCount();for(;o<c&&e.getLine(o).trim().startsWith("#|");)o++;return e.replaceRange(`#| label: ${n}
`,{line:o,ch:0}),console.log(`Inserted label "#| label: ${n}" into code chunk at line ${o}`),1}else{let o=s.match(/^(```{r)(.*)(})?$/);if(!o)return 0;let c=o[1],a=o[2]||"",r=o[3]?"}":"",i;a.trim()===""?i=` {#${n}}`:i=a+` {#${n}}`;let h=`${c}${i}${r||"}"}`;return e.setLine(t,h),console.log(`Inserted label "{#${n}}" into code chunk at line ${t}`),0}}insertOutputWithCallout(e,t,n,s,l,o,c){console.log("Inserting or updating output callout and images into the editor");let a=[];if(n&&n.trim()!==""){let u=n.trim().split(`
`).map(w=>"> "+w);a.push(...u)}if(s.forEach(u=>{let v=`![center|480](${`${u}`})`;a.push(`> ${v}`)}),l.forEach(u=>{let w=`<iframe src="${u}" width="100%" height="680px"></iframe>`;a.push(`> ${w}`)}),a.length===0){console.log("No output, images, or widgets to insert. Skipping callout insertion.");return}let r=`> [!OUTPUT]+ {#output-${o}}
`;r+=a.join(`
`)+`
`,r+=`> 
`;let i=-1,h=-1,g=e.lineCount();for(let u=0;u<g;u++)if(e.getLine(u).trim()===`> [!OUTPUT]+ {#output-${o}}`){for(i=u,h=u;h+1<g;){let v=e.getLine(h+1);if(!v.startsWith("> ")&&v.trim()!=="")break;h++}break}if(i!==-1&&h!==-1){let u={line:i,ch:0},w={line:h+1,ch:0};e.replaceRange(r+`
`,u,w),console.log(`Replaced existing output callout for ID: ${o}`)}else{let u={line:t+1,ch:0};e.replaceRange(`
`+r+`
`,u),console.log(`Inserted new output callout for ID: ${o}`)}}removeOutputCallout(e,t){console.log(`Removing output callout for ID: ${t} if it exists`);let n=-1,s=-1,l=e.lineCount();for(let o=0;o<l;o++)if(e.getLine(o).trim()===`> [!OUTPUT]+ {#output-${t}}`){for(n=o,s=o;s+1<l;){let a=e.getLine(s+1);if(!a.startsWith("> ")&&a.trim()!=="")break;s++}break}if(n!==-1&&s!==-1){let o={line:n,ch:0},c={line:s+1,ch:0};e.replaceRange("",o,c),console.log(`Removed existing output callout for ID: ${t}`)}else console.log(`No existing output callout found for ID: ${t}`)}getRProcess(e){let t=this.rProcesses.get(e);return t||(t=this.startRProcess(e)),t}startRProcess(e){let t=this.settings.rExecutablePath||"/usr/local/bin/R";if(console.log(`Starting R process for note: ${e} using executable: ${t}`),!b.existsSync(t))throw new p.Notice(`R executable not found at ${t}. Please update the path in settings.`),console.error(`R executable not found at ${t}.`),new Error(`R executable not found at ${t}.`);let n={...process.env},s=(0,B.spawn)(t,["--vanilla","--quiet","--slave"],{stdio:"pipe",env:n});s.on("error",o=>{console.error(`Failed to start R process for ${e}:`,o)});let l=`
library(jsonlite)
if (!exists("user_env")) {
  user_env <- new.env()
}


# prevent browser:
options(browser='false')
options(bitmapType = 'cairo')
options(device = function(...) jpeg(filename = tempfile(), width=800, height=600, ...))
    `;return s.stdin.write(l+`
`),this.rProcesses.set(e,s),console.log(`R process started and stored for note: ${e}`),s}async runRCodeInSession(e,t,n,s,l,o){console.log("runRCodeInSession called for note:",e,"with ID:",s);let c=this.getRProcess(e);return new Promise(async(a,r)=>{let i="",h="",g=await xe(x.join(ae.tmpdir(),"rplots-")),u=process.platform==="win32"?g.replace(/\\/g,"\\\\"):g.replace(/\\/g,"/"),w=x.join(u,`help_${s}.txt`),v=process.platform==="win32"?w.replace(/\\/g,"\\\\"):w.replace(/\\/g,"/"),P=`__END_OF_OUTPUT__${Date.now()}__`,E="__PLOT_PATH__",$=`__ENVIRONMENT_DATA__${Date.now()}__`,m="__WIDGET_PATH__",M=`
      opts <- list(
        echo = ${o.echo!=="false"?"TRUE":"FALSE"},
        warning = ${o.warning!=="false"?"TRUE":"FALSE"},
        error = ${o.error!=="false"?"TRUE":"FALSE"},
        include = ${o.include!=="false"?"TRUE":"FALSE"},
        output = ${o.output!=="false"?"TRUE":"FALSE"}
      )
      `,Y=`
library(evaluate)
library(jsonlite)
library(htmlwidgets)
Sys.setenv(RSTUDIO_PANDOC='${this.settings.rstudioPandocPath}')


${M}

# Define our custom print function
custom_print_htmlwidget <- function(x, ..., viewer = NULL) {
    # Generate a unique filename
    
    widgetFileName <- paste0("widget_${s}_",".html")
    widgetFilePath <- file.path("${u}", widgetFileName)
    # Save the widget to the file
    saveWidget(x, widgetFilePath, selfcontained = TRUE)
    # Output a marker to indicate the widget was saved
    cat("${m}", widgetFileName, "\\n", sep="")
}

# Replace the original function in the 'htmlwidgets' namespace
environment(custom_print_htmlwidget) <- asNamespace('htmlwidgets')
assignInNamespace("print.htmlwidget", custom_print_htmlwidget, envir = as.environment("package:htmlwidgets"))



timecheck <- Sys.time()

# override help
.getHelpFile <- function(file)
{
    path <- dirname(file)
    dirpath <- dirname(path)
    if(!file.exists(dirpath))
        stop(gettextf("invalid %s argument", sQuote("file")), domain = NA)
    pkgname <- basename(dirpath)
    RdDB <- file.path(path, pkgname)
    if(!file.exists(paste(RdDB, "rdx", sep = ".")))
        stop(gettextf("package %s exists but was not installed under R >= 2.10.0 so help cannot be accessed", sQuote(pkgname)), domain = NA)
    tools:::fetchRdDB(RdDB, basename(file))
}


print.help_files_with_topic <- function(x, ...)
{
  browser <- getOption("browser")
  topic <- attr(x, "topic")
  type <- "text"
  paths <- as.character(x)
  
  if(!length(paths)) {
    writeLines(c(gettextf("No documentation for %s in specified packages and libraries:",
                          sQuote(topic)),
                 gettextf("you could try %s",
                          sQuote(paste0("??", topic)))))
    return(invisible(x))
  }
  
  port <- NULL
  
  if(attr(x, "tried_all_packages")) {
    paths <- unique(dirname(dirname(paths)))
    msg <- gettextf("Help for topic %s is not in any loaded package but can be found in the following packages:",
                    sQuote(topic))
    
      writeLines(c(strwrap(msg), "",
                   paste(" ",
                         formatDL(c(gettext("Package"), basename(paths)),
                                  c(gettext("Library"), dirname(paths)),
                                  indent = 22))))
    } else {
    if(length(paths) > 1L) {
      file <- paths[1L]
      p <- paths
      msg <- gettextf("Help on topic %s was found in the following packages:",
                      sQuote(topic))
      paths <- dirname(dirname(paths))
      txt <- formatDL(c("Package", basename(paths)),
                      c("Library", dirname(paths)),
                      indent = 22L)
      writeLines(c(strwrap(msg), "", paste(" ", txt), ""))
      if(interactive()) {
        fp <- file.path(paths, "Meta", "Rd.rds")
        tp <- basename(p)
        titles <- tp
        if(type == "html" || type == "latex")
          tp <- tools::file_path_sans_ext(tp)
        for (i in seq_along(fp)) {
          tmp <- try(readRDS(fp[i]))
          titles[i] <- if(inherits(tmp, "try-error"))
            "unknown title" else
              tmp[tools::file_path_sans_ext(tmp$File) == tp[i], "Title"]
        }
        txt <- paste0(titles, " {", basename(paths), "}")
        ## the default on menu() is currtently graphics = FALSE
        res <- menu(txt, title = gettext("Choose one"),
                    graphics = getOption("menu.graphics"))
        if(res > 0) file <- p[res]
      } else {
        writeLines(gettext("
Using the first match ..."))
      }
    }
    else
      file <- paths
    
    if(type == "text") {
      pkgname <- basename(dirname(dirname(file)))
      tools::Rd2HTML(.getHelpFile(file), out = "${v}",
                            package = pkgname)

    }
    
  }
  
  invisible(x)
}

# Ensure user environment exists
if (!exists("user_env")) {
  user_env <- new.env()
}
# Evaluate code and capture results
results <- evaluate(${JSON.stringify(t)}, envir = user_env)

# Initialize outputs and image paths
outputs <- character()
imagePaths <- character()

# Process the results
for (res in results) {
  if (inherits(res, "source")) {
    # Ignore source elements
  } else if (inherits(res, "warning")) {
    if (opts$warning && opts$include) {
      outputs <- c(outputs, paste("Warning:", conditionMessage(res)))
    }
  } else if (inherits(res, "message")) {
    if (opts$output && opts$include) {
      outputs <- c(outputs, res$message)
    }
  } else if (inherits(res, "error")) {
    if (opts$error && opts$include) {
      outputs <- c(outputs, paste("Error:", conditionMessage(res)))
    }
  } else if (inherits(res, "character")) {
    if (opts$output && opts$include) {
      outputs <- c(outputs, res)
    }
  } else if (inherits(res, "recordedplot")) {
    if (opts$output && opts$include) {
      # Save the plot to a file using uniqueId
      timestamp <- format(Sys.time(), "%Y%m%d%H%M%S")
      plotFileName <- paste0("plot_${s}_", length(imagePaths) + 1, "_", timestamp, ".jpg")
      plotFilePath <- file.path("${u}", plotFileName)
      jpeg(filename=plotFilePath, width=800, height=600)
      replayPlot(res)
      dev.off()
      imagePaths <- c(imagePaths, plotFileName)
    }
  }
}

# Attempt to retrieve the last animation, if any
if (opts$output && opts$include) {
  if (requireNamespace("gganimate", quietly = TRUE)) {
    anim <- try(gganimate::last_animation(), silent = TRUE)
    if (is.character(anim[1])) {
      if (file.info(anim[1])$mtime > timecheck) {
        timestamp <- format(Sys.time(), "%Y%m%d%H%M%S")
        animFileName <- paste0("animation_${s}_", timestamp, ".gif")
        animFilePath <- file.path("${u}", animFileName)
        file.copy(anim[1], animFilePath)
        imagePaths <- c(imagePaths, animFileName)
      }
    }
  }
}

# Output the collected outputs
if (opts$output && opts$include && length(outputs) > 0) {
  cat(paste(outputs, collapse = "\\n"), "\\n")
}

# Output image markers
if (opts$output && opts$include) {
  for (img in imagePaths) {
    cat("${E}", img, "\\n", sep="")
  }
}

# Output the environment data
vars <- ls(envir = user_env)
env_list <- lapply(vars, function(var_name) {
  var_value <- get(var_name, envir = user_env)
  var_class <- class(var_value)
  var_size <- as.numeric(object.size(var_value)) # Convert to numeric
  var_val <- capture.output(str(var_value, max.level=0))

  list(
    name = var_name,
    type = var_class,
    size = var_size,
    value = var_val
  )
})




env_json <- toJSON(env_list, auto_unbox = TRUE)
cat("${$}\\n")
cat(env_json)
cat("\\n${P}\\n")
      `;console.log(`Wrapped code sent to R:
`,Y);let G=async A=>{var K,Z;let F=A.toString();if(console.log("Received data chunk:",F),i+=F,i.includes(P)){console.log("Marker detected in R output"),c.stdout.off("data",G),c.stderr.off("data",J);let k="",D="";if(l){try{let R=await b.promises.readFile(w,"utf8");console.log("Read help content:",R),D=R}catch(R){console.error("Failed to read help content:",R),D="Failed to retrieve help content."}let d=(K=this.app.workspace.getLeavesOfType(O)[0])==null?void 0:K.view;d?d.updateHelpContent(D):console.log("RHelpView not found in the workspace")}let U="";if(i.includes($)){let d=i.split($);k=d[0].trim(),U=d[1].split(P)[0].trim()}else k=i.split(P)[0].trim();console.log("Result before processing:",k),console.log("Environment data:",U);let X=E.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),S=[],ce=new RegExp(`${X}(.*)`,"g"),N;for(;(N=ce.exec(k))!==null;)if(console.log("Image regex match:",N),N[1]){let d=N[1].trim();S.push(d)}else console.error("No image file name captured in regex match:",N);k=k.replace(new RegExp(`${X}.*`,"g"),"").trim();for(let d of S){let R=x.join(g,d);try{let C=await b.promises.readFile(R),L=`plots/${d}`;this.app.vault.getAbstractFileByPath("plots")||(await this.app.vault.createFolder("plots"),console.log('Created "plots" folder in the vault'));let Q=this.app.vault.getAbstractFileByPath(L);Q?(await this.app.vault.modifyBinary(Q,C),console.log(`Image file updated in vault: ${L}`)):(await this.app.vault.createBinary(L,C),console.log(`Image file created in vault: ${L}`)),S[S.indexOf(d)]=L}catch(C){console.error(`Error handling image file ${d}:`,C)}}let T=[],ee=m.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),pe=new RegExp(`${ee}(.*)`,"g"),H;for(;(H=pe.exec(k))!==null;)if(H[1]){let d=H[1].trim();T.push(d)}k=k.replace(new RegExp(`${ee}.*`,"g"),"").trim();for(let d of T){let R=x.join(g,d);try{let C=await b.promises.readFile(R,"utf8"),L=`widgets/${d}`,ne=this.app.vault.adapter.getBasePath();this.app.vault.getAbstractFileByPath("widgets")||await this.app.vault.createFolder("widgets");let se=this.app.vault.getAbstractFileByPath(L);se?await this.app.vault.modify(se,C):await this.app.vault.create(L,C);let ue=x.join(ne,L),de=(0,le.pathToFileURL)(ue).href;T[T.indexOf(d)]=de}catch(C){console.error(`Error handling widget file ${d}:`,C)}}try{console.log(`Temporary directory ${g} removed`)}catch(d){console.error(`Error removing temporary directory ${g}:`,d)}let te=(Z=this.app.workspace.getLeavesOfType(_)[0])==null?void 0:Z.view;if(te){let d=[];try{d=JSON.parse(U),console.log("Parsed environment variables:",d)}catch(R){console.error("Failed to parse environment data JSON:",R)}te.updateEnvironmentData(n,d)}else console.log("REnvironmentView not found in the workspace");i="",h="",h?r(h.trim()):a({result:k,imagePaths:S,widgetPaths:T,helpContent:D})}},J=A=>{let F=A.toString();console.error("Received error chunk from R:",F),h+=F};c.stdout.on("data",G),c.stderr.on("data",J),c.stdin.write(Y+`
`),console.log("Wrapped R code sent to the R process")})}addFrontMatter(e,t){return e.startsWith(`---
`)?e:`---
title: "${t.basename}"
author: "Author Name"
date: today
format: html
---

`+e}sanitizeFileName(e){return e.replace(/[^a-zA-Z0-9-_]/g,"_")}stripOutputCallouts(e){let t=/> \[!OUTPUT\]\+ {#output-[\w]+}\n(?:>.*\n)*>/gm;return e.replace(t,"")}async savePreparedNote(e,t){let n=x.basename(t,".md"),l=this.sanitizeFileName(n)+"_quarto.qmd",o,c=this.app.vault.adapter;if(c instanceof p.FileSystemAdapter)o=c.getBasePath();else throw new p.Notice("Unable to determine vault base path. Export failed."),new Error("Vault adapter is not a FileSystemAdapter.");let a=x.join(o,"Exports");b.existsSync(a)||b.mkdirSync(a);let r=x.join(a,l);return await b.promises.writeFile(r,e,"utf8"),r}async renderWithQuarto(e){return new Promise((t,n)=>{let s=this.settings.quartoExecutablePath||"quarto";if(!b.existsSync(s)){new p.Notice(`Quarto executable not found at ${s}. Please update the path in settings.`),console.error(`Quarto executable not found at ${s}.`),n(new Error(`Quarto executable not found at ${s}.`));return}let l=this.settings.rExecutablePath||"Rscript",o={...process.env};o.QUARTO_R=l;let c=x.dirname(l);o.PATH=`${c}${x.delimiter}${o.PATH}`;let a=(0,B.spawn)(s,["render",e],{stdio:["ignore","pipe","pipe"],env:o}),r="";a.stderr.on("data",i=>{r+=i.toString()}),a.on("error",i=>{new p.Notice("Failed to start Quarto rendering process."),console.error(`Failed to start Quarto rendering process: ${i}`),n(i)}),a.on("exit",(i,h)=>{console.log(`Quarto render process exited with code: ${i}, signal: ${h}`),i===0?(new p.Notice("Quarto rendering completed successfully."),t()):(console.error(`Quarto stderr: ${r}`),new p.Notice("Quarto rendering failed. Click for details.",1e4),n(new Error(`Quarto exited with code ${i}`)))})})}async exportNoteWithQuarto(){let e=this.app.workspace.getActiveFile();if(!e){new p.Notice("No active note to export.");return}try{let n=await this.app.vault.read(e);n=this.addFrontMatter(n,e),n=this.stripOutputCallouts(n);let s=await this.savePreparedNote(n,e.path);await this.renderWithQuarto(s),new p.Notice("Note exported and rendered with Quarto successfully.")}catch(t){console.error("Failed to export note with Quarto:",t),new p.Notice("Failed to export note with Quarto.")}}};
